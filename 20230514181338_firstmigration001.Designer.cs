// <auto-generated />
using System;
using Flex.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Flex.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230514181338_firstmigration001")]
    partial class firstmigration001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Flex.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AffectedColumns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Flex.Models.Courses", b =>
                {
                    b.Property<int>("courseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("courseID"), 1L, 1);

                    b.Property<string>("courseCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("courseDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("creditHours")
                        .HasColumnType("int");

                    b.Property<int?>("preReq_ID")
                        .HasColumnType("int");

                    b.HasKey("courseID");

                    b.HasIndex("preReq_ID");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            courseID = -10,
                            courseCode = "CS001",
                            courseDescription = "Programming Fundamental",
                            courseName = "Programming Fundamental",
                            creditHours = 3
                        },
                        new
                        {
                            courseID = -9,
                            courseCode = "CS002",
                            courseDescription = "Object Oriented Programming",
                            courseName = "Object Oriented Programming",
                            creditHours = 3
                        },
                        new
                        {
                            courseID = -8,
                            courseCode = "CS003",
                            courseDescription = "Operating System",
                            courseName = "Operating System",
                            creditHours = 3
                        },
                        new
                        {
                            courseID = -7,
                            courseCode = "CS004",
                            courseDescription = "Relational Database Systems",
                            courseName = "Relational Database Systems",
                            creditHours = 3
                        },
                        new
                        {
                            courseID = -6,
                            courseCode = "CS005",
                            courseDescription = "Design and Algorithm",
                            courseName = "Design and Algorithm",
                            creditHours = 3
                        },
                        new
                        {
                            courseID = -5,
                            courseCode = "CS006",
                            courseDescription = "Compiler Construction",
                            courseName = "Compiler Construction",
                            creditHours = 3
                        },
                        new
                        {
                            courseID = -4,
                            courseCode = "CS007",
                            courseDescription = "Computer Architecture",
                            courseName = "Computer Architecture",
                            creditHours = 3
                        });
                });

            modelBuilder.Entity("Flex.Models.FacultySectionSemesterCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("SemesterCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("assignments")
                        .HasColumnType("int");

                    b.Property<int?>("finals")
                        .HasColumnType("int");

                    b.Property<string>("loginID")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("midTerms")
                        .HasColumnType("int");

                    b.Property<int?>("quizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId")
                        .IsUnique()
                        .HasFilter("[SectionId] IS NOT NULL");

                    b.HasIndex("SemesterCourseId");

                    b.HasIndex("loginID");

                    b.ToTable("FacultySectionSemesterCourses");

                    b.HasData(
                        new
                        {
                            Id = -12,
                            SemesterCourseId = -9,
                            assignments = 10,
                            finals = 50,
                            loginID = "630c76c9-999e-4421-9e96-804c6bec4c39",
                            midTerms = 30,
                            quizzes = 10
                        },
                        new
                        {
                            Id = -11,
                            SemesterCourseId = -8,
                            assignments = 10,
                            finals = 50,
                            loginID = "630c76c9-999e-4421-9e96-804c6bec4c39",
                            midTerms = 30,
                            quizzes = 10
                        },
                        new
                        {
                            Id = -10,
                            SemesterCourseId = -7,
                            assignments = 10,
                            finals = 50,
                            loginID = "630c76c9-999e-4421-9e96-804c6bec4c39",
                            midTerms = 30,
                            quizzes = 10
                        },
                        new
                        {
                            Id = -9,
                            SemesterCourseId = -10,
                            assignments = 10,
                            finals = 50,
                            loginID = "e33a3f37-0026-4775-b6fd-4287d4105c5f",
                            midTerms = 30,
                            quizzes = 10
                        },
                        new
                        {
                            Id = -8,
                            SemesterCourseId = -8,
                            assignments = 10,
                            finals = 50,
                            loginID = "e33a3f37-0026-4775-b6fd-4287d4105c5f",
                            midTerms = 30,
                            quizzes = 10
                        },
                        new
                        {
                            Id = -7,
                            SemesterCourseId = -7,
                            assignments = 10,
                            finals = 50,
                            loginID = "e33a3f37-0026-4775-b6fd-4287d4105c5f",
                            midTerms = 30,
                            quizzes = 10
                        },
                        new
                        {
                            Id = -6,
                            SemesterCourseId = -6,
                            assignments = 10,
                            finals = 50,
                            loginID = "e33a3f37-0026-4775-b6fd-4287d4105c5f",
                            midTerms = 30,
                            quizzes = 10
                        },
                        new
                        {
                            Id = -5,
                            SemesterCourseId = -4,
                            assignments = 10,
                            finals = 50,
                            loginID = "1ed0b7a0-e0bc-4861-a0f0-37c8cdd662a1",
                            midTerms = 30,
                            quizzes = 10
                        },
                        new
                        {
                            Id = -4,
                            SemesterCourseId = -5,
                            assignments = 10,
                            finals = 50,
                            loginID = "1ed0b7a0-e0bc-4861-a0f0-37c8cdd662a1",
                            midTerms = 30,
                            quizzes = 10
                        },
                        new
                        {
                            Id = -3,
                            SemesterCourseId = -6,
                            assignments = 10,
                            finals = 50,
                            loginID = "1ed0b7a0-e0bc-4861-a0f0-37c8cdd662a1",
                            midTerms = 30,
                            quizzes = 10
                        });
                });

            modelBuilder.Entity("Flex.Models.IdentityCustomFields", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e15bae4a-c92f-428b-be0d-96389ae166ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54c38a8b-f254-4976-89d0-3857e612bf7a",
                            Email = "FacultyAdmin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FacultyAdmin@gmail.com",
                            NormalizedUserName = "FacultyAdmin@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEM6idcO88XXa7z8LCI5Fi6MlSqaM3Hg6oCpMOr9ACXvzsGnt4XKSh9VGi8TYKEbinw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3df998ad-d2fd-4ee3-80f7-d5a7fc493c86",
                            TwoFactorEnabled = false,
                            UserName = "FacultyAdmin@gmail.com",
                            UserType = 0
                        },
                        new
                        {
                            Id = "630c76c9-999e-4421-9e96-804c6bec4c39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ee1d2f71-00d7-402f-a085-c8af99b88fe2",
                            Email = "NoorulAin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NoorulAin@gmail.com",
                            NormalizedUserName = "NoorulAin@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELcgHDrbv0YaYTj7ygNqP6/m2m1iQKpDCtUYNCJQp5Gleb4WyOb94A8C6xphGDSnRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "666cab24-73d0-4295-aa20-4e556c036844",
                            TwoFactorEnabled = false,
                            UserName = "NoorulAin@gmail.com",
                            UserType = 1
                        },
                        new
                        {
                            Id = "e33a3f37-0026-4775-b6fd-4287d4105c5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "147089c6-3af9-4284-9cf3-a5d13a1dca34",
                            Email = "Nirmal@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Nirmal@gmail.com",
                            NormalizedUserName = "Nirmal@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEDImlaGNPkLmSV3WqrMwuQPFrcAxA/P1rFXGPVJT+Ywmz8geZavZeIkX/e/VPRPiIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b1eb378-371c-422b-ac5e-ca9c06f07e2b",
                            TwoFactorEnabled = false,
                            UserName = "Nirmal@gmail.com",
                            UserType = 1
                        },
                        new
                        {
                            Id = "1ed0b7a0-e0bc-4861-a0f0-37c8cdd662a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c2162fa-7d86-4f25-b70e-f3a5e23e825b",
                            Email = "Owais@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Owais@gmail.com",
                            NormalizedUserName = "Owais@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEISSyuA18r3SWpEMjz6/Vb7DTQeiOmnlPpJBsiipgJIeehoGGm2eWMNGerI+gEK/TQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7448fd00-17a5-468d-a2f4-94f90f1586ee",
                            TwoFactorEnabled = false,
                            UserName = "Owais@gmail.com",
                            UserType = 1
                        },
                        new
                        {
                            Id = "c59157f5-6869-4189-b97f-b45ae8b4ef00",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef031231-1807-45b4-8d5b-97f8bcd6f3d4",
                            Email = "Fatima@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Fatima@gmail.com",
                            NormalizedUserName = "Fatima@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEC7s8nbs1TlfKw6gsvXwWMJhXqZCRAUaSV231Gb2ZQp45yqvr4YMsdlowWHvBYoTXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "309dafaf-8052-49cd-9c11-78f8f20a3d9d",
                            TwoFactorEnabled = false,
                            UserName = "Fatima@gmail.com",
                            UserType = 2
                        },
                        new
                        {
                            Id = "90393265-1b3b-4b72-b2b7-f4598cbfec68",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce2846c8-32e4-404f-84d1-4a18e03979a6",
                            Email = "Amna@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Amna@gmail.com",
                            NormalizedUserName = "Amna@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENjI0l3l34ENS3zH/dEy6yfKYsYQ0GSNKlAFRTvo5kwbeCAazovHVEec90VUhWRfsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "338d3e4f-d34a-42f3-b5e4-51c02f2d3394",
                            TwoFactorEnabled = false,
                            UserName = "Amna@gmail.com",
                            UserType = 2
                        },
                        new
                        {
                            Id = "12bb9f11-6587-4f9a-917b-14fc5e5c42c1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15398a60-9661-4ea7-a6f4-c6c045949e08",
                            Email = "Salman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "Salman@gmail.com",
                            NormalizedUserName = "Salman@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEDYp7tIh+5VNM4Chx3tDwWxOp24GfsbR+SPYo+Y/M3AMbcEpPfcl1I4LNhRYEEfxvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ac179198-19cf-4ffb-87ac-ffff816dbba3",
                            TwoFactorEnabled = false,
                            UserName = "Salman@gmail.com",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Flex.Models.SectionAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionAttendance");
                });

            modelBuilder.Entity("Flex.Models.SectionSemesterCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SemesterCourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SemesterCourseId");

                    b.ToTable("SectionSemesterCourses");
                });

            modelBuilder.Entity("Flex.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Semester");

                    b.HasData(
                        new
                        {
                            Id = -10,
                            Description = "Fall Semester 2023",
                            Name = "Fall Semester 2023",
                            endDate = new DateTime(2023, 5, 14, 23, 13, 37, 834, DateTimeKind.Local).AddTicks(7228),
                            startDate = new DateTime(2022, 12, 14, 23, 13, 37, 834, DateTimeKind.Local).AddTicks(7193)
                        });
                });

            modelBuilder.Entity("Flex.Models.SemesterCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SCourseId")
                        .HasColumnType("int");

                    b.Property<int>("SemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SCourseId");

                    b.HasIndex("SemId");

                    b.ToTable("SemesterCourses");

                    b.HasData(
                        new
                        {
                            Id = -10,
                            SCourseId = -10,
                            SemId = -10
                        },
                        new
                        {
                            Id = -9,
                            SCourseId = -9,
                            SemId = -10
                        },
                        new
                        {
                            Id = -8,
                            SCourseId = -8,
                            SemId = -10
                        },
                        new
                        {
                            Id = -7,
                            SCourseId = -7,
                            SemId = -10
                        },
                        new
                        {
                            Id = -6,
                            SCourseId = -6,
                            SemId = -10
                        },
                        new
                        {
                            Id = -5,
                            SCourseId = -5,
                            SemId = -10
                        },
                        new
                        {
                            Id = -4,
                            SCourseId = -4,
                            SemId = -10
                        });
                });

            modelBuilder.Entity("Flex.Models.StudentSectionAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SectionAttendanceId")
                        .HasColumnType("int");

                    b.Property<int>("StudSecSemCourseId")
                        .HasColumnType("int");

                    b.Property<bool?>("present")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SectionAttendanceId");

                    b.HasIndex("StudSecSemCourseId");

                    b.ToTable("StudentSectionAttendance");
                });

            modelBuilder.Entity("Flex.Models.StudentSectionSemesterCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("SemesterCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("assignments")
                        .HasColumnType("int");

                    b.Property<int?>("finals")
                        .HasColumnType("int");

                    b.Property<bool?>("isApproved")
                        .HasColumnType("bit");

                    b.Property<string>("loginID")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("midTerms")
                        .HasColumnType("int");

                    b.Property<int?>("quizzes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("SemesterCourseId");

                    b.HasIndex("loginID");

                    b.ToTable("StudentSectionSemesterCourses");

                    b.HasData(
                        new
                        {
                            Id = -15,
                            SemesterCourseId = -9,
                            isApproved = false,
                            loginID = "c59157f5-6869-4189-b97f-b45ae8b4ef00"
                        },
                        new
                        {
                            Id = -14,
                            SemesterCourseId = -8,
                            isApproved = false,
                            loginID = "c59157f5-6869-4189-b97f-b45ae8b4ef00"
                        },
                        new
                        {
                            Id = -13,
                            SemesterCourseId = -7,
                            isApproved = false,
                            loginID = "c59157f5-6869-4189-b97f-b45ae8b4ef00"
                        },
                        new
                        {
                            Id = -12,
                            SemesterCourseId = -6,
                            isApproved = false,
                            loginID = "c59157f5-6869-4189-b97f-b45ae8b4ef00"
                        },
                        new
                        {
                            Id = -11,
                            SemesterCourseId = -5,
                            isApproved = false,
                            loginID = "c59157f5-6869-4189-b97f-b45ae8b4ef00"
                        },
                        new
                        {
                            Id = -10,
                            SemesterCourseId = -4,
                            isApproved = false,
                            loginID = "c59157f5-6869-4189-b97f-b45ae8b4ef00"
                        },
                        new
                        {
                            Id = -8,
                            SemesterCourseId = -9,
                            isApproved = false,
                            loginID = "90393265-1b3b-4b72-b2b7-f4598cbfec68"
                        },
                        new
                        {
                            Id = -7,
                            SemesterCourseId = -8,
                            isApproved = false,
                            loginID = "90393265-1b3b-4b72-b2b7-f4598cbfec68"
                        },
                        new
                        {
                            Id = -6,
                            SemesterCourseId = -7,
                            isApproved = false,
                            loginID = "90393265-1b3b-4b72-b2b7-f4598cbfec68"
                        },
                        new
                        {
                            Id = -5,
                            SemesterCourseId = -6,
                            isApproved = false,
                            loginID = "90393265-1b3b-4b72-b2b7-f4598cbfec68"
                        },
                        new
                        {
                            Id = -4,
                            SemesterCourseId = -5,
                            isApproved = false,
                            loginID = "90393265-1b3b-4b72-b2b7-f4598cbfec68"
                        },
                        new
                        {
                            Id = -3,
                            SemesterCourseId = -4,
                            isApproved = false,
                            loginID = "90393265-1b3b-4b72-b2b7-f4598cbfec68"
                        });
                });

            modelBuilder.Entity("Flex.Models.Userprofile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("city")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("cnic")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("loginID")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("phoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("s_batch")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("s_degree")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("s_rollNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("s_section")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("loginID")
                        .IsUnique();

                    b.ToTable("Userprofile");

                    b.HasData(
                        new
                        {
                            Id = -7,
                            FirstName = "Amir",
                            LastName = "Khan",
                            address = "G-11/4",
                            city = "IBD",
                            cnic = "111-111111-1",
                            country = "PK",
                            loginID = "e15bae4a-c92f-428b-be0d-96389ae166ac",
                            phoneNumber = "0512260915"
                        },
                        new
                        {
                            Id = -6,
                            FirstName = "Noorul",
                            LastName = "Ain",
                            address = "G-11/4",
                            city = "IBD",
                            cnic = "111-111111-1",
                            country = "PK",
                            loginID = "630c76c9-999e-4421-9e96-804c6bec4c39",
                            phoneNumber = "0512260915"
                        },
                        new
                        {
                            Id = -5,
                            FirstName = "Nirmal",
                            LastName = "Chaudhary",
                            address = "G-11/4",
                            city = "IBD",
                            cnic = "111-111111-1",
                            country = "PK",
                            loginID = "e33a3f37-0026-4775-b6fd-4287d4105c5f",
                            phoneNumber = "0512260915"
                        },
                        new
                        {
                            Id = -4,
                            FirstName = "Owais",
                            LastName = "Idrees",
                            address = "G-11/4",
                            city = "IBD",
                            cnic = "111-111111-1",
                            country = "PK",
                            loginID = "1ed0b7a0-e0bc-4861-a0f0-37c8cdd662a1",
                            phoneNumber = "0512260915"
                        },
                        new
                        {
                            Id = -3,
                            FirstName = "Fatima",
                            LastName = "Athar Khan",
                            address = "G-11/4",
                            city = "IBD",
                            cnic = "111-111111-1",
                            country = "PK",
                            loginID = "c59157f5-6869-4189-b97f-b45ae8b4ef00",
                            phoneNumber = "0512260915",
                            s_rollNumber = "21i0385"
                        },
                        new
                        {
                            Id = -2,
                            FirstName = "Amna",
                            LastName = "Usman",
                            address = "G-11/4",
                            city = "IBD",
                            cnic = "111-111111-1",
                            country = "PK",
                            loginID = "90393265-1b3b-4b72-b2b7-f4598cbfec68",
                            phoneNumber = "0512260915",
                            s_rollNumber = "21i2555"
                        },
                        new
                        {
                            Id = -1,
                            FirstName = "Salman",
                            LastName = "Jan",
                            address = "G-11/4",
                            city = "IBD",
                            cnic = "111-111111-1",
                            country = "PK",
                            loginID = "12bb9f11-6587-4f9a-917b-14fc5e5c42c1",
                            phoneNumber = "0512260915",
                            s_rollNumber = "21i2574"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Flex.Models.Courses", b =>
                {
                    b.HasOne("Flex.Models.Courses", "PreReqs")
                        .WithMany()
                        .HasForeignKey("preReq_ID");

                    b.Navigation("PreReqs");
                });

            modelBuilder.Entity("Flex.Models.FacultySectionSemesterCourses", b =>
                {
                    b.HasOne("Flex.Models.SectionSemesterCourses", "SectionSemesterCourse")
                        .WithOne("FacultSection")
                        .HasForeignKey("Flex.Models.FacultySectionSemesterCourses", "SectionId");

                    b.HasOne("Flex.Models.SemesterCourses", "SemCourses")
                        .WithMany()
                        .HasForeignKey("SemesterCourseId");

                    b.HasOne("Flex.Models.Userprofile", "Instructor")
                        .WithMany("FacultySectionSemesterCourses")
                        .HasForeignKey("loginID")
                        .HasPrincipalKey("loginID");

                    b.Navigation("Instructor");

                    b.Navigation("SectionSemesterCourse");

                    b.Navigation("SemCourses");
                });

            modelBuilder.Entity("Flex.Models.SectionAttendance", b =>
                {
                    b.HasOne("Flex.Models.SectionSemesterCourses", "sectionInfo")
                        .WithMany("sectionAttendances")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sectionInfo");
                });

            modelBuilder.Entity("Flex.Models.SectionSemesterCourses", b =>
                {
                    b.HasOne("Flex.Models.SemesterCourses", "SemCourses")
                        .WithMany("SectionSemesterCourses")
                        .HasForeignKey("SemesterCourseId");

                    b.Navigation("SemCourses");
                });

            modelBuilder.Entity("Flex.Models.SemesterCourses", b =>
                {
                    b.HasOne("Flex.Models.Courses", "Course")
                        .WithMany()
                        .HasForeignKey("SCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flex.Models.Semester", "semester")
                        .WithMany("SemesterCourses")
                        .HasForeignKey("SemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("semester");
                });

            modelBuilder.Entity("Flex.Models.StudentSectionAttendance", b =>
                {
                    b.HasOne("Flex.Models.SectionAttendance", "sectionAttendance")
                        .WithMany("Attendances")
                        .HasForeignKey("SectionAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flex.Models.StudentSectionSemesterCourses", "studentSecSemCourses")
                        .WithMany("StudentSectionAttendances")
                        .HasForeignKey("StudSecSemCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("sectionAttendance");

                    b.Navigation("studentSecSemCourses");
                });

            modelBuilder.Entity("Flex.Models.StudentSectionSemesterCourses", b =>
                {
                    b.HasOne("Flex.Models.SectionSemesterCourses", "SectionSemesterCourse")
                        .WithMany("StudentSectionSemesterCourses")
                        .HasForeignKey("SectionId");

                    b.HasOne("Flex.Models.SemesterCourses", "SemCourses")
                        .WithMany()
                        .HasForeignKey("SemesterCourseId");

                    b.HasOne("Flex.Models.Userprofile", "Student")
                        .WithMany("StudentSemesterCourses")
                        .HasForeignKey("loginID")
                        .HasPrincipalKey("loginID");

                    b.Navigation("SectionSemesterCourse");

                    b.Navigation("SemCourses");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Flex.Models.IdentityCustomFields", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Flex.Models.IdentityCustomFields", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flex.Models.IdentityCustomFields", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Flex.Models.IdentityCustomFields", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Flex.Models.SectionAttendance", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("Flex.Models.SectionSemesterCourses", b =>
                {
                    b.Navigation("FacultSection");

                    b.Navigation("StudentSectionSemesterCourses");

                    b.Navigation("sectionAttendances");
                });

            modelBuilder.Entity("Flex.Models.Semester", b =>
                {
                    b.Navigation("SemesterCourses");
                });

            modelBuilder.Entity("Flex.Models.SemesterCourses", b =>
                {
                    b.Navigation("SectionSemesterCourses");
                });

            modelBuilder.Entity("Flex.Models.StudentSectionSemesterCourses", b =>
                {
                    b.Navigation("StudentSectionAttendances");
                });

            modelBuilder.Entity("Flex.Models.Userprofile", b =>
                {
                    b.Navigation("FacultySectionSemesterCourses");

                    b.Navigation("StudentSemesterCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
